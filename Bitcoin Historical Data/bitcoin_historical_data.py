{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9866522,"sourceType":"datasetVersion","datasetId":1346}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [markdown]\n# ## Import Necessary Libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_absolute_error, r2_score\nimport pickle\n\n# %% [markdown]\n# ## Step 1: Load the Dataset\nbitcoin_data = pd.read_csv('/kaggle/input/bitcoin-historical-data/btcusd_1-min_data.csv')\n\n# Display the first few rows to verify the data\nprint(bitcoin_data.head())\n\n# %% [markdown]\n# ## Step 2: Basic Inspection and Initial Analysis\n# I used `bitcoin_data.info()` to check for missing values and to get an overview of the data.\n# I also use `describe()` to check summary statistics for numerical columns to understand distributions, ranges, and potential outliers.\nbitcoin_data.info()\nprint(bitcoin_data.describe())\n\n# %% [markdown]\n# ## Step 3: Handling Missing Values\n# Check for missing values\nmissing_values = bitcoin_data.isnull().sum()\nprint(\"Missing Values in Each Column:\\n\", missing_values)\n\n# Use forward-fill method to handle missing values\nbitcoin_data.fillna(method='ffill', inplace=True)\n\n# Confirm no more missing values\nprint(\"Missing Values After Fill:\\n\", bitcoin_data.isnull().sum())\n\n# %% [markdown]\n# ## Step 4: Data Type Conversions\n# Convert 'Timestamp' column to datetime for further feature engineering\nbitcoin_data['Timestamp'] = pd.to_datetime(bitcoin_data['Timestamp'], unit='s')\nprint(\"Data Types After Conversion:\\n\", bitcoin_data.dtypes)\n\n# %% [markdown]\n# ## Step 5: Outlier Detection and Treatment\n# Detect outliers using Z-Score and IQR methods\nfrom scipy.stats import zscore\n\n# Z-Score outlier detection\nz_scores = bitcoin_data[['Open', 'High', 'Low', 'Close', 'Volume']].apply(zscore)\noutliers_z = (z_scores > 3) | (z_scores < -3)\nprint(\"Outliers detected using Z-Score method:\\n\", outliers_z.sum())\n\n# IQR method for outlier detection\nQ1 = bitcoin_data[['Open', 'High', 'Low', 'Close', 'Volume']].quantile(0.25)\nQ3 = bitcoin_data[['Open', 'High', 'Low', 'Close', 'Volume']].quantile(0.75)\nIQR = Q3 - Q1\noutliers_iqr = ((bitcoin_data[['Open', 'High', 'Low', 'Close', 'Volume']] < (Q1 - 1.5 * IQR)) | \n                (bitcoin_data[['Open', 'High', 'Low', 'Close', 'Volume']] > (Q3 + 1.5 * IQR)))\nprint(\"Outliers detected using IQR method:\\n\", outliers_iqr.sum())\n\n# %% [markdown]\n# ## Step 6: Feature Engineering and Transformation\n# Create time-based features from the 'Timestamp' column\nbitcoin_data['Hour'] = bitcoin_data['Timestamp'].dt.hour\nbitcoin_data['Day'] = bitcoin_data['Timestamp'].dt.day\nbitcoin_data['Weekday'] = bitcoin_data['Timestamp'].dt.weekday\nbitcoin_data['Month'] = bitcoin_data['Timestamp'].dt.month\n\n# Calculate 7-day moving average for 'Close'\nbitcoin_data['7_day_MA'] = bitcoin_data['Close'].rolling(window=7).mean()\n\n# Calculate daily price change (percentage change)\nbitcoin_data['Price_Change'] = bitcoin_data['Close'].pct_change() * 100\n\n# Display the features after transformations\nprint(bitcoin_data[['Timestamp', 'Hour', 'Day', 'Weekday', 'Month', '7_day_MA', 'Price_Change']].head())\n\n# %% [markdown]\n# ## Step 7: One-Hot Encoding and Removing Redundant Columns\n# One-hot encode the 'Weekday' and 'Month' columns\nbitcoin_data = pd.get_dummies(bitcoin_data, columns=['Weekday', 'Month'], drop_first=True)\n\n# Drop 'Timestamp' as it's no longer needed\nbitcoin_data.drop(columns=['Timestamp'], inplace=True)\nprint(bitcoin_data.head())\n\n# %% [markdown]\n# ## Step 8: Finalizing the Dataset for Modeling\n# Scaling the numerical features to ensure that all features are on the same scale\nscaler = StandardScaler()\ncolumns_to_scale = ['Open', 'High', 'Low', 'Close', 'Volume', '7_day_MA', 'Price_Change']\nbitcoin_data[columns_to_scale] = scaler.fit_transform(bitcoin_data[columns_to_scale])\n\n# Display the scaled data\nprint(bitcoin_data.head())\n\n# %% [markdown]\n# ## Step 9: Splitting Data for Model Building\n# I split the dataset into features (X) and target (y) where the target is 'Close' price.\nX = bitcoin_data.drop(columns=['Close'])\ny = bitcoin_data['Close']\n\n# Split the data into training and testing sets (80% for training and 20% for testing)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\nprint(f\"Training set size: {X_train.shape[0]}\")\nprint(f\"Test set size: {X_test.shape[0]}\")\n\n# %% [markdown]\n# ## Step 10: Handling Missing Values in Feature Sets\n# Ensure there are no missing values in the feature sets before training the model\nimputer = SimpleImputer(strategy='mean')\n\n# Apply the imputer to both the training and test sets\nX_train_imputed = imputer.fit_transform(X_train)\nX_test_imputed = imputer.transform(X_test)\n\n# Verify that the missing values are handled\nprint(pd.DataFrame(X_train_imputed, columns=X.columns).isnull().sum())\n\n# %% [markdown]\n# ## Step 11: Model Training\n# Train the RandomForestRegressor model using the imputed data\nmodel = RandomForestRegressor(n_estimators=100, random_state=42)\n\n# Fit the model to the training data\nmodel.fit(X_train_imputed, y_train)\n\n# Make predictions on the test set\ny_pred = model.predict(X_test_imputed)\n\n# %% [markdown]\n# ## Step 12: Model Evaluation\n# I evaluate the model using **Mean Absolute Error (MAE)** and **R-squared (RÂ²)** to assess its performance.\nmae = mean_absolute_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\n# Print the evaluation results\nprint(f\"Mean Absolute Error (MAE): {mae}\")\nprint(f\"R-squared: {r2}\")\n\n# %% [markdown]\n# ## Step 13: Saving the Model\n# Save the trained model to a file using `pickle`, so it can be reused in the future without retraining.\nwith open('bitcoin_price_model.pkl', 'wb') as model_file:\n    pickle.dump(model, model_file)\n\nprint(\"Model saved successfully!\")\n\n# %% [markdown]\n# ## Step 14: Exporting Predictions for Power BI\n# Export the actual and predicted values into a CSV file for use in Power BI visualization.\ny_pred = model.predict(X_test_imputed)\n\n# Create a DataFrame with actual vs predicted values\npredictions_df = pd.DataFrame({\n    'Actual': y_test,\n    'Predicted': y_pred\n})\n\n# Save the predictions to a CSV file\npredictions_df.to_csv('bitcoin_predictions.csv', index=False)\nprint(\"Predictions saved to 'bitcoin_predictions.csv' for Power BI.\")\n","metadata":{"_uuid":"d8d817de-d8ae-4145-9e7b-0887349517b4","_cell_guid":"d19e3149-54cb-4f6a-a917-4a0d0c0079ae","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-11-11T20:52:57.121529Z","iopub.execute_input":"2024-11-11T20:52:57.122107Z"}},"outputs":[{"name":"stdout","text":"      Timestamp  Open  High   Low  Close  Volume\n0  1.325412e+09  4.58  4.58  4.58   4.58     0.0\n1  1.325412e+09  4.58  4.58  4.58   4.58     0.0\n2  1.325412e+09  4.58  4.58  4.58   4.58     0.0\n3  1.325412e+09  4.58  4.58  4.58   4.58     0.0\n4  1.325412e+09  4.58  4.58  4.58   4.58     0.0\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 6711281 entries, 0 to 6711280\nData columns (total 6 columns):\n #   Column     Dtype  \n---  ------     -----  \n 0   Timestamp  float64\n 1   Open       float64\n 2   High       float64\n 3   Low        float64\n 4   Close      float64\n 5   Volume     float64\ndtypes: float64(6)\nmemory usage: 307.2 MB\n          Timestamp          Open          High           Low         Close  \\\ncount  6.711280e+06  6.711281e+06  6.711281e+06  6.711281e+06  6.711281e+06   \nmean   1.526779e+09  1.424237e+04  1.424854e+04  1.423601e+04  1.424240e+04   \nstd    1.162682e+08  1.906472e+04  1.907214e+04  1.905718e+04  1.906481e+04   \nmin    1.325412e+09  3.800000e+00  3.800000e+00  3.800000e+00  3.800000e+00   \n25%    1.426092e+09  4.111900e+02  4.114200e+02  4.110000e+02  4.111800e+02   \n50%    1.526772e+09  6.204810e+03  6.207020e+03  6.202110e+03  6.204860e+03   \n75%    1.627452e+09  2.291612e+04  2.292375e+04  2.290900e+04  2.291628e+04   \nmax    1.731197e+09  7.696200e+04  7.699000e+04  7.692500e+04  7.696200e+04   \n\n             Volume  \ncount  6.711281e+06  \nmean   5.476939e+00  \nstd    2.298091e+01  \nmin    0.000000e+00  \n25%    1.816141e-02  \n50%    5.000000e-01  \n75%    3.188689e+00  \nmax    5.853852e+03  \nMissing Values in Each Column:\n Timestamp    1\nOpen         0\nHigh         0\nLow          0\nClose        0\nVolume       0\ndtype: int64\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_524/3386096925.py:33: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n  bitcoin_data.fillna(method='ffill', inplace=True)\n","output_type":"stream"},{"name":"stdout","text":"Missing Values After Fill:\n Timestamp    0\nOpen         0\nHigh         0\nLow          0\nClose        0\nVolume       0\ndtype: int64\nData Types After Conversion:\n Timestamp    datetime64[ns]\nOpen                float64\nHigh                float64\nLow                 float64\nClose               float64\nVolume              float64\ndtype: object\nOutliers detected using Z-Score method:\n Open       8789\nHigh       8808\nLow        8808\nClose      8801\nVolume    76724\ndtype: int64\nOutliers detected using IQR method:\n Open      425880\nHigh      426170\nLow       425567\nClose     425894\nVolume    935604\ndtype: int64\n            Timestamp  Hour  Day  Weekday  Month  7_day_MA  Price_Change\n0 2012-01-01 10:01:00    10    1        6      1       NaN           NaN\n1 2012-01-01 10:02:00    10    1        6      1       NaN           0.0\n2 2012-01-01 10:03:00    10    1        6      1       NaN           0.0\n3 2012-01-01 10:04:00    10    1        6      1       NaN           0.0\n4 2012-01-01 10:05:00    10    1        6      1       NaN           0.0\n   Open  High   Low  Close  Volume  Hour  Day  7_day_MA  Price_Change  \\\n0  4.58  4.58  4.58   4.58     0.0    10    1       NaN           NaN   \n1  4.58  4.58  4.58   4.58     0.0    10    1       NaN           0.0   \n2  4.58  4.58  4.58   4.58     0.0    10    1       NaN           0.0   \n3  4.58  4.58  4.58   4.58     0.0    10    1       NaN           0.0   \n4  4.58  4.58  4.58   4.58     0.0    10    1       NaN           0.0   \n\n   Weekday_1  ...  Month_3  Month_4  Month_5  Month_6  Month_7  Month_8  \\\n0      False  ...    False    False    False    False    False    False   \n1      False  ...    False    False    False    False    False    False   \n2      False  ...    False    False    False    False    False    False   \n3      False  ...    False    False    False    False    False    False   \n4      False  ...    False    False    False    False    False    False   \n\n   Month_9  Month_10  Month_11  Month_12  \n0    False     False     False     False  \n1    False     False     False     False  \n2    False     False     False     False  \n3    False     False     False     False  \n4    False     False     False     False  \n\n[5 rows x 26 columns]\n       Open      High       Low     Close    Volume  Hour  Day  7_day_MA  \\\n0 -0.746813 -0.746847 -0.746775 -0.746811 -0.238326    10    1       NaN   \n1 -0.746813 -0.746847 -0.746775 -0.746811 -0.238326    10    1       NaN   \n2 -0.746813 -0.746847 -0.746775 -0.746811 -0.238326    10    1       NaN   \n3 -0.746813 -0.746847 -0.746775 -0.746811 -0.238326    10    1       NaN   \n4 -0.746813 -0.746847 -0.746775 -0.746811 -0.238326    10    1       NaN   \n\n   Price_Change  Weekday_1  ...  Month_3  Month_4  Month_5  Month_6  Month_7  \\\n0           NaN      False  ...    False    False    False    False    False   \n1     -0.001673      False  ...    False    False    False    False    False   \n2     -0.001673      False  ...    False    False    False    False    False   \n3     -0.001673      False  ...    False    False    False    False    False   \n4     -0.001673      False  ...    False    False    False    False    False   \n\n   Month_8  Month_9  Month_10  Month_11  Month_12  \n0    False    False     False     False     False  \n1    False    False     False     False     False  \n2    False    False     False     False     False  \n3    False    False     False     False     False  \n4    False    False     False     False     False  \n\n[5 rows x 26 columns]\nTraining set size: 5369024\nTest set size: 1342257\nOpen            0\nHigh            0\nLow             0\nVolume          0\nHour            0\nDay             0\n7_day_MA        0\nPrice_Change    0\nWeekday_1       0\nWeekday_2       0\nWeekday_3       0\nWeekday_4       0\nWeekday_5       0\nWeekday_6       0\nMonth_2         0\nMonth_3         0\nMonth_4         0\nMonth_5         0\nMonth_6         0\nMonth_7         0\nMonth_8         0\nMonth_9         0\nMonth_10        0\nMonth_11        0\nMonth_12        0\ndtype: int64\n","output_type":"stream"}],"execution_count":null}]}